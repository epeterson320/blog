{"version":3,"sources":["webpack:///path---posts-show-scn-the-better-logger-i-promised-b8619d861727310dddf0.js","webpack:///./.cache/json/posts-show-scn-the-better-logger-i-promised.json"],"names":["webpackJsonp","450","module","exports","data","post","html","frontmatter","title","fields","slug","date","datetime","previous","next","pathContext","id","prevId","nextId"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,KAAA,kgiBAAqneC,aAAq+EC,MAAA,0CAAiDC,QAAWC,KAAA,+CAAAC,KAAA,qBAAAC,SAAA,6BAAyHC,UAAaN,aAAeC,MAAA,8DAAqEC,QAAWC,KAAA,qEAA2EI,MAASP,aAAeC,MAAA,4CAAmDC,QAAWC,KAAA,sDAA4DK,aAAgBC,GAAA,uIAAAC,OAAA,2JAAAC,OAAA","file":"path---posts-show-scn-the-better-logger-i-promised-b8619d861727310dddf0.js","sourcesContent":["webpackJsonp([109252900942149],{\n\n/***/ 450:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"html\":\"<p>Originally posted at <a href=\\\"https://blogs.sap.com/2014/09/30/show-scn-the-better-logger-i-promised/\\\">https://blogs.sap.com/2014/09/30/show-scn-the-better-logger-i-promised/</a>.</p>\\n<p>A month back, I wrote a short blog about the application log, and how great it would be to have yet another object oriented wrapper around the SBAL function group and friends.  Well, I wasn’t kidding.  I just put up a working version on Github, and added some documentation to explain some of the features I thought would make a logger tool great.  It’s been done fifty times before, but I haven’t seen any of them with the features I describe.  It’s all working, so feel free to kick the tires, fork the project, and please, please, let me know what you think!</p>\\n<p>epeterson320/ABAP-Logger · GitHub</p>\\n<p>Here is my original post: What Would a Developer-Friendly Application Log Look Like?</p>\\n<p>Below is most of the readme from Github:</p>\\n<h2 id=\\\"zcl_logger\\\"><a href=\\\"#zcl_logger\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ZCL_LOGGER</h2>\\n<p>SAP Logging as painless as any other language</p>\\n<p>One of these things is not like the others\\nOne of the most effective ways of debugging and inspecting a program’s operations is by writing to a log.  Logging is so powerful, just about every language has some way of doing it.  For example, if you want to write to a log in javascript, you just need to write the following line of code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>“Leapin’ lizards<span class=\\\"token punctuation\\\">,</span> something went wrong<span class=\\\"token operator\\\">!</span>”<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Or how about in Ruby? Ruby has the added benefit of different levels of messages.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">require</span> ‘logger’\\nlog <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Logger</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">(</span>‘logfile<span class=\\\"token punctuation\\\">.</span>log’<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">warn</span><span class=\\\"token punctuation\\\">(</span>“<span class=\\\"token constant\\\">You</span>’re on thin ice<span class=\\\"token punctuation\\\">,</span> bud<span class=\\\"token punctuation\\\">.</span>”<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span>“<span class=\\\"token constant\\\">Things</span> are normal again<span class=\\\"token punctuation\\\">.</span>”<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Writing an Android app? You’re in luck – you can log and optionally tag messages, all in one line of Java.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>Log<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">e</span><span class=\\\"token punctuation\\\">(</span>‘MAPS_INTERFACE’<span class=\\\"token punctuation\\\">,</span> ‘The system is down<span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>So, how does ABAP logging stack up to the other languages? What code is required to log a string to be viewed later?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">DATA</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">header</span> <span class=\\\"token keyword\\\">TYPE</span> bal_s_log<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">handle</span> <span class=\\\"token keyword\\\">TYPE</span> balloghndl<span class=\\\"token punctuation\\\">,</span>\\n        handles_to_save <span class=\\\"token keyword\\\">TYPE</span> bal_t_logh<span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">header</span>-object <span class=\\\"token operator\\\">=</span> ‘ZINTERFACES’<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">header</span>-subobject <span class=\\\"token operator\\\">=</span> ‘ACCOUNTING’<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">header</span>-extnumber <span class=\\\"token operator\\\">=</span> ‘Stuff imported <span class=\\\"token keyword\\\">from</span> <span class=\\\"token keyword\\\">legacy</span> systems’<span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">FUNCTION</span> ‘BAL_LOG_CREATE’\\n    <span class=\\\"token keyword\\\">EXPORTING</span>\\n    i_s_log      <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">header</span>\\n    <span class=\\\"token keyword\\\">IMPORTING</span>\\n    e_log_handle <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">handle</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">FUNCTION</span> ‘BAL_LOG_MSG_ADD_FREE_TEXT’\\n    <span class=\\\"token keyword\\\">EXPORTING</span>\\n    i_log_handle <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">handle</span>\\n    i_msgty <span class=\\\"token operator\\\">=</span> ‘E’\\n    i_text <span class=\\\"token operator\\\">=</span> ‘You see<span class=\\\"token punctuation\\\">,</span> what had happened was…’<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">FUNCTION</span> ‘BAL_DB_SAVE’\\n    <span class=\\\"token keyword\\\">EXPORTING</span>\\n    i_t_log_handle <span class=\\\"token operator\\\">=</span> handles_to_save<span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>If you’re not asleep after writing all that, then you’ve at least forgot what you were programming before you had to write to a log.  If anything, logging should be QUICK so you can get on with the real programming!</p>\\n<h3 id=\\\"get-out-of-my-way\\\"><a href=\\\"#get-out-of-my-way\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get out of my way</h3>\\n<p>A better log would barely interrupt my code, so I can output messages in one line, and you don’t lose the big picture as you are reading it. What do you wish the ABAP example above looked like?  How about this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">DATA</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">log</span> <span class=\\\"token keyword\\\">TYPE</span> <span class=\\\"token keyword\\\">REF</span> <span class=\\\"token keyword\\\">TO</span> zcl_logger<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span> <span class=\\\"token operator\\\">=</span> zcl_logger<span class=\\\"token token-operator punctuation\\\">=></span>new<span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">object</span> <span class=\\\"token operator\\\">=</span> ‘ZINTERFACES’\\n                        subobject <span class=\\\"token operator\\\">=</span> ‘ACCOUNTING’\\n                        desc <span class=\\\"token operator\\\">=</span> ‘Stuff imported <span class=\\\"token keyword\\\">from</span> <span class=\\\"token keyword\\\">legacy</span> systems’ <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">log</span>->e<span class=\\\"token punctuation\\\">(</span> ‘You see<span class=\\\"token punctuation\\\">,</span> what had happened was…’ <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>All the information, none of the boilerplate. This is the goal of ZCL_LOGGER.</p>\\n<h3 id=\\\"log-anything\\\"><a href=\\\"#log-anything\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Log anything</h3>\\n<p>Making use of SAP’s run-time type services, we can pass almost anything we might want to log to an instance of ZCL_LOGGER, and it will do the heavy lifting.</p>\\n<p>Log a string!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">log</span>->s<span class=\\\"token punctuation\\\">(</span> ‘Document <span class=\\\"token number\\\">4800095710</span> created successfully’ <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log a bapi return message!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">DATA</span><span class=\\\"token punctuation\\\">:</span> rtn <span class=\\\"token keyword\\\">TYPE</span> bapiret2<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span>->add<span class=\\\"token punctuation\\\">(</span> rtn <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log a…gasp…TABLE of bapi return messages!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">DATA</span><span class=\\\"token punctuation\\\">:</span> msgs <span class=\\\"token keyword\\\">TYPE</span> <span class=\\\"token keyword\\\">TABLE</span> <span class=\\\"token keyword\\\">OF</span> bapiret2<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span>->add<span class=\\\"token punctuation\\\">(</span> msgs <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log an exception? Yep!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">TRY</span><span class=\\\"token punctuation\\\">.</span>\\n    rubber_band_powered_spaceship<span class=\\\"token token-operator punctuation\\\">=></span>fly_to<span class=\\\"token punctuation\\\">(</span> the_moon <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token keyword\\\">CATCH</span> zcx_not_enough_power <span class=\\\"token keyword\\\">INTO</span> err<span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token keyword\\\">log</span>->e<span class=\\\"token punctuation\\\">(</span> err <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">ENDTRY</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log the current system message.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">MESSAGE</span> e001<span class=\\\"token punctuation\\\">(</span>oo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">WITH</span> foo bar baz <span class=\\\"token keyword\\\">INTO</span> <span class=\\\"token keyword\\\">dummy</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span>->add<span class=\\\"token punctuation\\\">(</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span> “you don’t even need <span class=\\\"token keyword\\\">to</span> pass anything <span class=\\\"token keyword\\\">in</span><span class=\\\"token punctuation\\\">,</span> bro<span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log the return of a BDC call.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">TRANSACTION</span> ‘CO07’ <span class=\\\"token keyword\\\">USING</span> bdc_tab <span class=\\\"token keyword\\\">MESSAGES</span> <span class=\\\"token keyword\\\">INTO</span> bdc_messages<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span>->add<span class=\\\"token punctuation\\\">(</span> bdc_messages <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>And that’s every scenario I’ve been able to think of, so far.</p>\\n<h3 id=\\\"dont-ignore-saps-strengths\\\"><a href=\\\"#dont-ignore-saps-strengths\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Don’t Ignore SAP’s Strengths</h3>\\n<p>As frustrating as it can sometimes be, the SAP environment has a lot of power, and it would be good not to ignore it.  Transaction code SLG1 views and filters logs with ease, and it allows for added context variables and parameters. A new logger class should not reinvent the wheel, the wheelbarrow, or the mechanisms for saving and displaying logs.</p>\\n<p>If you have an instance of a log object, you can add context variables and a problem class, two of a few things that SLG1 handles well.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">log</span>->w<span class=\\\"token punctuation\\\">(</span> obj_to_log <span class=\\\"token operator\\\">=</span> ‘Document created <span class=\\\"token keyword\\\">with</span> <span class=\\\"token keyword\\\">errors</span>’ “&lt;– Which document? Needs <span class=\\\"token keyword\\\">context</span><span class=\\\"token punctuation\\\">.</span>\\n        <span class=\\\"token keyword\\\">context</span> <span class=\\\"token operator\\\">=</span> new_document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span> “&lt;– Here’s the <span class=\\\"token keyword\\\">context</span>\\n</code></pre>\\n      </div>\\n<p>Since this log is designed to be simple, it has compromised a lot of the more exotic function modules in the SBAL family. If your log needs to use one of these function modules, the log header, handle and database id are all read-only members of the class, so you can pass them right along to the function module.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">log</span>->i<span class=\\\"token punctuation\\\">(</span> ‘Results <span class=\\\"token keyword\\\">of</span> system <span class=\\\"token keyword\\\">analysis</span>’ <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">FUNCTION</span> ‘BAL_LOG_MSG_CUMULATE’\\n    <span class=\\\"token keyword\\\">EXPORTING</span>\\n    i_log_handle <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">log</span>->handle\\n    i_s_msg <span class=\\\"token operator\\\">=</span> l_msg\\n    i_compare_attributes <span class=\\\"token operator\\\">=</span> abap_true<span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"chainable\\\"><a href=\\\"#chainable\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Chainable</h3>\\n<p>It’s 2014, so yes, you can chain method calls.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code>zcl_logger<span class=\\\"token token-operator punctuation\\\">=></span>new<span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">object</span> <span class=\\\"token operator\\\">=</span> ‘foo’ <span class=\\\"token punctuation\\\">)</span>->e<span class=\\\"token punctuation\\\">(</span> ‘Bad things happened<span class=\\\"token punctuation\\\">:</span> See details’ <span class=\\\"token punctuation\\\">)</span>->e<span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Show SCN: The Better Logger I Promised\"},\"fields\":{\"slug\":\"/posts/show-scn-the-better-logger-i-promised\",\"date\":\"September 30, 2014\",\"datetime\":\"2014-09-30T04:00:00.000Z\"}},\"previous\":{\"frontmatter\":{\"title\":\"What Would a Developer-Friendly Application Log Look Like?\"},\"fields\":{\"slug\":\"/posts/what-would-a-developer-friendly-application-log-look-like\"}},\"next\":{\"frontmatter\":{\"title\":\"Simple and Recursive Javascript Promises\"},\"fields\":{\"slug\":\"/posts/recursive-javascript-promises-for-the-win\"}}},\"pathContext\":{\"id\":\"C:/Users/EPeterson/projects/ericp/posts/2014-09-30-show-scn-the-better-logger-i-promised/index.md absPath of file >>> MarkdownRemark\",\"prevId\":\"C:/Users/EPeterson/projects/ericp/posts/2014-07-30-what-would-a-developer-friendly-application-log-look-like/index.md absPath of file >>> MarkdownRemark\",\"nextId\":\"C:/Users/EPeterson/projects/ericp/posts/2017-03-28-recursive-javascript-promises-for-the-win/index.md absPath of file >>> MarkdownRemark\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-show-scn-the-better-logger-i-promised-b8619d861727310dddf0.js","module.exports = {\"data\":{\"post\":{\"html\":\"<p>Originally posted at <a href=\\\"https://blogs.sap.com/2014/09/30/show-scn-the-better-logger-i-promised/\\\">https://blogs.sap.com/2014/09/30/show-scn-the-better-logger-i-promised/</a>.</p>\\n<p>A month back, I wrote a short blog about the application log, and how great it would be to have yet another object oriented wrapper around the SBAL function group and friends.  Well, I wasn’t kidding.  I just put up a working version on Github, and added some documentation to explain some of the features I thought would make a logger tool great.  It’s been done fifty times before, but I haven’t seen any of them with the features I describe.  It’s all working, so feel free to kick the tires, fork the project, and please, please, let me know what you think!</p>\\n<p>epeterson320/ABAP-Logger · GitHub</p>\\n<p>Here is my original post: What Would a Developer-Friendly Application Log Look Like?</p>\\n<p>Below is most of the readme from Github:</p>\\n<h2 id=\\\"zcl_logger\\\"><a href=\\\"#zcl_logger\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>ZCL_LOGGER</h2>\\n<p>SAP Logging as painless as any other language</p>\\n<p>One of these things is not like the others\\nOne of the most effective ways of debugging and inspecting a program’s operations is by writing to a log.  Logging is so powerful, just about every language has some way of doing it.  For example, if you want to write to a log in javascript, you just need to write the following line of code:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-javascript\\\"><code>console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>“Leapin’ lizards<span class=\\\"token punctuation\\\">,</span> something went wrong<span class=\\\"token operator\\\">!</span>”<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Or how about in Ruby? Ruby has the added benefit of different levels of messages.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token keyword\\\">require</span> ‘logger’\\nlog <span class=\\\"token operator\\\">=</span> <span class=\\\"token constant\\\">Logger</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">new</span><span class=\\\"token punctuation\\\">(</span>‘logfile<span class=\\\"token punctuation\\\">.</span>log’<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">warn</span><span class=\\\"token punctuation\\\">(</span>“<span class=\\\"token constant\\\">You</span>’re on thin ice<span class=\\\"token punctuation\\\">,</span> bud<span class=\\\"token punctuation\\\">.</span>”<span class=\\\"token punctuation\\\">)</span>\\nlog<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">info</span><span class=\\\"token punctuation\\\">(</span>“<span class=\\\"token constant\\\">Things</span> are normal again<span class=\\\"token punctuation\\\">.</span>”<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>Writing an Android app? You’re in luck – you can log and optionally tag messages, all in one line of Java.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-java\\\"><code>Log<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">e</span><span class=\\\"token punctuation\\\">(</span>‘MAPS_INTERFACE’<span class=\\\"token punctuation\\\">,</span> ‘The system is down<span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span><span class=\\\"token operator\\\">!</span>’<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>So, how does ABAP logging stack up to the other languages? What code is required to log a string to be viewed later?</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">DATA</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">header</span> <span class=\\\"token keyword\\\">TYPE</span> bal_s_log<span class=\\\"token punctuation\\\">,</span>\\n        <span class=\\\"token keyword\\\">handle</span> <span class=\\\"token keyword\\\">TYPE</span> balloghndl<span class=\\\"token punctuation\\\">,</span>\\n        handles_to_save <span class=\\\"token keyword\\\">TYPE</span> bal_t_logh<span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">header</span>-object <span class=\\\"token operator\\\">=</span> ‘ZINTERFACES’<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">header</span>-subobject <span class=\\\"token operator\\\">=</span> ‘ACCOUNTING’<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">header</span>-extnumber <span class=\\\"token operator\\\">=</span> ‘Stuff imported <span class=\\\"token keyword\\\">from</span> <span class=\\\"token keyword\\\">legacy</span> systems’<span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">FUNCTION</span> ‘BAL_LOG_CREATE’\\n    <span class=\\\"token keyword\\\">EXPORTING</span>\\n    i_s_log      <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">header</span>\\n    <span class=\\\"token keyword\\\">IMPORTING</span>\\n    e_log_handle <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">handle</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">FUNCTION</span> ‘BAL_LOG_MSG_ADD_FREE_TEXT’\\n    <span class=\\\"token keyword\\\">EXPORTING</span>\\n    i_log_handle <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">handle</span>\\n    i_msgty <span class=\\\"token operator\\\">=</span> ‘E’\\n    i_text <span class=\\\"token operator\\\">=</span> ‘You see<span class=\\\"token punctuation\\\">,</span> what had happened was…’<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">FUNCTION</span> ‘BAL_DB_SAVE’\\n    <span class=\\\"token keyword\\\">EXPORTING</span>\\n    i_t_log_handle <span class=\\\"token operator\\\">=</span> handles_to_save<span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>If you’re not asleep after writing all that, then you’ve at least forgot what you were programming before you had to write to a log.  If anything, logging should be QUICK so you can get on with the real programming!</p>\\n<h3 id=\\\"get-out-of-my-way\\\"><a href=\\\"#get-out-of-my-way\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Get out of my way</h3>\\n<p>A better log would barely interrupt my code, so I can output messages in one line, and you don’t lose the big picture as you are reading it. What do you wish the ABAP example above looked like?  How about this:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">DATA</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">log</span> <span class=\\\"token keyword\\\">TYPE</span> <span class=\\\"token keyword\\\">REF</span> <span class=\\\"token keyword\\\">TO</span> zcl_logger<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span> <span class=\\\"token operator\\\">=</span> zcl_logger<span class=\\\"token token-operator punctuation\\\">=></span>new<span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">object</span> <span class=\\\"token operator\\\">=</span> ‘ZINTERFACES’\\n                        subobject <span class=\\\"token operator\\\">=</span> ‘ACCOUNTING’\\n                        desc <span class=\\\"token operator\\\">=</span> ‘Stuff imported <span class=\\\"token keyword\\\">from</span> <span class=\\\"token keyword\\\">legacy</span> systems’ <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n\\n<span class=\\\"token keyword\\\">log</span>->e<span class=\\\"token punctuation\\\">(</span> ‘You see<span class=\\\"token punctuation\\\">,</span> what had happened was…’ <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>All the information, none of the boilerplate. This is the goal of ZCL_LOGGER.</p>\\n<h3 id=\\\"log-anything\\\"><a href=\\\"#log-anything\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Log anything</h3>\\n<p>Making use of SAP’s run-time type services, we can pass almost anything we might want to log to an instance of ZCL_LOGGER, and it will do the heavy lifting.</p>\\n<p>Log a string!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">log</span>->s<span class=\\\"token punctuation\\\">(</span> ‘Document <span class=\\\"token number\\\">4800095710</span> created successfully’ <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log a bapi return message!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">DATA</span><span class=\\\"token punctuation\\\">:</span> rtn <span class=\\\"token keyword\\\">TYPE</span> bapiret2<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span>->add<span class=\\\"token punctuation\\\">(</span> rtn <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log a…gasp…TABLE of bapi return messages!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">DATA</span><span class=\\\"token punctuation\\\">:</span> msgs <span class=\\\"token keyword\\\">TYPE</span> <span class=\\\"token keyword\\\">TABLE</span> <span class=\\\"token keyword\\\">OF</span> bapiret2<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span>->add<span class=\\\"token punctuation\\\">(</span> msgs <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log an exception? Yep!</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">TRY</span><span class=\\\"token punctuation\\\">.</span>\\n    rubber_band_powered_spaceship<span class=\\\"token token-operator punctuation\\\">=></span>fly_to<span class=\\\"token punctuation\\\">(</span> the_moon <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token keyword\\\">CATCH</span> zcx_not_enough_power <span class=\\\"token keyword\\\">INTO</span> err<span class=\\\"token punctuation\\\">.</span>\\n    <span class=\\\"token keyword\\\">log</span>->e<span class=\\\"token punctuation\\\">(</span> err <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">ENDTRY</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log the current system message.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">MESSAGE</span> e001<span class=\\\"token punctuation\\\">(</span>oo<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">WITH</span> foo bar baz <span class=\\\"token keyword\\\">INTO</span> <span class=\\\"token keyword\\\">dummy</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span>->add<span class=\\\"token punctuation\\\">(</span> <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span> “you don’t even need <span class=\\\"token keyword\\\">to</span> pass anything <span class=\\\"token keyword\\\">in</span><span class=\\\"token punctuation\\\">,</span> bro<span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>Log the return of a BDC call.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">TRANSACTION</span> ‘CO07’ <span class=\\\"token keyword\\\">USING</span> bdc_tab <span class=\\\"token keyword\\\">MESSAGES</span> <span class=\\\"token keyword\\\">INTO</span> bdc_messages<span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">log</span>->add<span class=\\\"token punctuation\\\">(</span> bdc_messages <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<p>And that’s every scenario I’ve been able to think of, so far.</p>\\n<h3 id=\\\"dont-ignore-saps-strengths\\\"><a href=\\\"#dont-ignore-saps-strengths\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Don’t Ignore SAP’s Strengths</h3>\\n<p>As frustrating as it can sometimes be, the SAP environment has a lot of power, and it would be good not to ignore it.  Transaction code SLG1 views and filters logs with ease, and it allows for added context variables and parameters. A new logger class should not reinvent the wheel, the wheelbarrow, or the mechanisms for saving and displaying logs.</p>\\n<p>If you have an instance of a log object, you can add context variables and a problem class, two of a few things that SLG1 handles well.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">log</span>->w<span class=\\\"token punctuation\\\">(</span> obj_to_log <span class=\\\"token operator\\\">=</span> ‘Document created <span class=\\\"token keyword\\\">with</span> <span class=\\\"token keyword\\\">errors</span>’ “&lt;– Which document? Needs <span class=\\\"token keyword\\\">context</span><span class=\\\"token punctuation\\\">.</span>\\n        <span class=\\\"token keyword\\\">context</span> <span class=\\\"token operator\\\">=</span> new_document <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span> “&lt;– Here’s the <span class=\\\"token keyword\\\">context</span>\\n</code></pre>\\n      </div>\\n<p>Since this log is designed to be simple, it has compromised a lot of the more exotic function modules in the SBAL family. If your log needs to use one of these function modules, the log header, handle and database id are all read-only members of the class, so you can pass them right along to the function module.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code><span class=\\\"token keyword\\\">log</span>->i<span class=\\\"token punctuation\\\">(</span> ‘Results <span class=\\\"token keyword\\\">of</span> system <span class=\\\"token keyword\\\">analysis</span>’ <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n<span class=\\\"token keyword\\\">CALL</span> <span class=\\\"token keyword\\\">FUNCTION</span> ‘BAL_LOG_MSG_CUMULATE’\\n    <span class=\\\"token keyword\\\">EXPORTING</span>\\n    i_log_handle <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">log</span>->handle\\n    i_s_msg <span class=\\\"token operator\\\">=</span> l_msg\\n    i_compare_attributes <span class=\\\"token operator\\\">=</span> abap_true<span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"chainable\\\"><a href=\\\"#chainable\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Chainable</h3>\\n<p>It’s 2014, so yes, you can chain method calls.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-abap\\\"><code>zcl_logger<span class=\\\"token token-operator punctuation\\\">=></span>new<span class=\\\"token punctuation\\\">(</span> <span class=\\\"token keyword\\\">object</span> <span class=\\\"token operator\\\">=</span> ‘foo’ <span class=\\\"token punctuation\\\">)</span>->e<span class=\\\"token punctuation\\\">(</span> ‘Bad things happened<span class=\\\"token punctuation\\\">:</span> See details’ <span class=\\\"token punctuation\\\">)</span>->e<span class=\\\"token punctuation\\\">(</span> error <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span>\\n</code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"Show SCN: The Better Logger I Promised\"},\"fields\":{\"slug\":\"/posts/show-scn-the-better-logger-i-promised\",\"date\":\"September 30, 2014\",\"datetime\":\"2014-09-30T04:00:00.000Z\"}},\"previous\":{\"frontmatter\":{\"title\":\"What Would a Developer-Friendly Application Log Look Like?\"},\"fields\":{\"slug\":\"/posts/what-would-a-developer-friendly-application-log-look-like\"}},\"next\":{\"frontmatter\":{\"title\":\"Simple and Recursive Javascript Promises\"},\"fields\":{\"slug\":\"/posts/recursive-javascript-promises-for-the-win\"}}},\"pathContext\":{\"id\":\"C:/Users/EPeterson/projects/ericp/posts/2014-09-30-show-scn-the-better-logger-i-promised/index.md absPath of file >>> MarkdownRemark\",\"prevId\":\"C:/Users/EPeterson/projects/ericp/posts/2014-07-30-what-would-a-developer-friendly-application-log-look-like/index.md absPath of file >>> MarkdownRemark\",\"nextId\":\"C:/Users/EPeterson/projects/ericp/posts/2017-03-28-recursive-javascript-promises-for-the-win/index.md absPath of file >>> MarkdownRemark\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-show-scn-the-better-logger-i-promised.json\n// module id = 450\n// module chunks = 109252900942149"],"sourceRoot":""}